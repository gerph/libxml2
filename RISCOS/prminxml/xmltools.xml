<?xml version="1.0"?>
<!DOCTYPE riscos-prm PUBLIC "-//Gerph//DTD PRM documentation 1.00//EN" 
                            "http://www.movspclr.co.uk/dtd/100/prm.dtd">

<riscos-prm doc-group="Library tools">
<chapter title="XML tools">
<section title="Introduction and Overview">
<p>The XML tools are ports of the LibXML2, LibXSLT and XSLDBG applications.
These are libraries originating on unix to manipulate and process XML and
XSLT documents. These ports were created by Justin Fletcher.
</p>

<p>Filenames specified with the XML tools, unless otherwise stated, are
in URI filename format, for example
<filename>file:///$/hello/there.xml</filename> or
<filename>../dir/thing.xml</filename>. URI style escaping using %xx may
be used to embed characters which would otherwise be illegal.</p>

</section>

<section title="System variables">
<sysvar-definition name="SGML$CatalogFiles"
                   description="Declare names of SGML catalog file definitions">
<use>
<p>This variable declares where SGML catalog files live. The value of the
variable itself is a space-separated list of native filenames of SGML
catalog files describing catalog entries. SGML catalogs are deprecated in
favour of XML catalogs.</p>
</use>

<related>
<!-- <reference type="command" name="Com" /> -->
<!-- <reference type="swi" name="thingy" /> -->
<reference type="sysvar" name="XML$CatalogFiles" />
</related>

</sysvar-definition>


<sysvar-definition name="XML$CatalogFiles"
                   description="Declare names of XML catalog file definitions">
<use>
<p>This variable declares where XML catalog files live. The value of the
variable itself is a space-separated list of native filenames of XML
catalog files describing catalog entries.</p>
</use>

<related>
<!-- <reference type="command" name="Com" /> -->
<!-- <reference type="swi" name="thingy" /> -->
<reference type="sysvar" name="SGML$CatalogFiles" />
</related>

</sysvar-definition>


<sysvar-definition name="XML$CatalogDebug"
                   description="Enable debugging of LibXML2 catalog processing">
<use>
<p>This variable controls whether the LibXML2 produces debug output.
    The output will be written to the standard output stream. The variable
    must be set to a non-zero value to enable debugging.</p>
</use>

<related>
<!-- <reference type="command" name="Com" /> -->
<!-- <reference type="swi" name="thingy" /> -->
<reference type="sysvar" name="SGML$CatalogFiles" />
<reference type="sysvar" name="XML$CatalogFiles" />
</related>

</sysvar-definition>



<sysvar-definition name="XMLLint$Indent"
                   description="Sets the indent used by the XMLLint tool">
<use>
    <p>This variable changes the default indentation used by the XMLLint tool.
        The indentation level is specified as the characters to output when
        indenting the output from XMLLint. If unset, the indentation defaults
        to two spaces.</p>
</use>

<related>
<!-- <reference type="command" name="Com" /> -->
<!-- <reference type="swi" name="thingy" /> -->
<reference type="sysvar" name="SGML$CatalogFiles" />
</related>

</sysvar-definition>

</section>

<section title="*Commands">
<command-definition name="XMLCatalog"
                    description="Command line tool to parse and manipulate XML or SGML catalog files.">
<syntax>
 <optional alternates="true">
  <switch name="sgml" />
  <switch name="shell" />
  <switch name="create" />
  <switch name="add">
   <userreplace>type</userreplace>
   <userreplace>original</userreplace>
   <userreplace>replacement</userreplace>
  </switch>
  <switch name="del">
   <userreplace>values</userreplace>
  </switch>
  <switch name="noout" />
  <switch name="verbose" />
  <switch name="no-super-update" />
 </optional>
 <optional><userreplace>catalog-file</userreplace></optional>
 <optional><userreplace>entities</userreplace></optional>
</syntax>

<parameter switch="sgml">
 Modify the SGML super catalogs when --add and --del are used</parameter>
<parameter switch="shell">
 Run a shell allowing interactive queries on catalog file</parameter>
<parameter switch="create">
 Create a new XML catalog. Outputs to stdout, ignoring
 <userreplace>filename</userreplace> unless <switch name="noout" /> is
 used, in which case it creates a new catalog file
 <userreplace>filename</userreplace>.</parameter>
<parameter switch="add">
 Add an entry to catalog file <userreplace>filename</userreplace>.
 <list>
  <item>
   <p>
    <userreplace>type</userreplace> indicates the type of entry.
    Possible types are 'public', 'system', 'rewriteSystem', 'delegatePublic'
    and 'delegateSystem'.
   </p>
  </item>
  <item>
   <p>
    <userreplace>orig</userreplace> is the original reference to be
    replaced
   </p>
  </item>
  <item>
   <p>
    <userreplace>replace</userreplace> is the URI of the replacement 
    entity to be used. The <switch name="add" /> option will not overwrite
    <userreplace>filename</userreplace>, outputing to stdout, unless
    <switch name="noout" /> is used. This switch will always take three
    parameters even if some of the XML catalog constructs will have only a
    single argument.
   </p>
  </item>
 </list>
 
 <p>
  If this switch option is used following the <switch name="sgml" /> switch,
  only a single argument, a <userreplace>filename</userreplace>, is used.
  This is used to add the name of a catalog file to an SGML supercatalog, a
  file that contains references to other included SGML catalog files.
 </p></parameter>

<parameter switch="del">
 Remove entries from the catalog file <userreplace>filename</userreplace>
 matching <userreplace>values</userreplace>. This switch will not
 overwrite <userreplace>filename</userreplace>, outputing to
 stdout, unless <switch name="noout" /> is used.</parameter>
<parameter switch="noout">
 Save output to the named catalogs rather than outputing to stdout.</parameter>
<parameter switch="no-super-update">
 Do not update SGML super catalogs</parameter>
<parameter switch="verbose">
 output debugging information.</parameter>

<use>
<p>xmlcatalog is a command line application allowing users to monitor and
manipulate XML and SGML catalogs. It is included in libxml2.</p>

<p>Its functions can be invoked from a single command from the command line,
or it can perform multiple functions in interactive mode. It can operate on
both XML and SGML files.</p>

<p>
<value-table head-number="Command" head-value="Meaning">
<value number="public &lt;PublicID&gt;">
Execute a public identifier lookup of the catalog entry for
<userreplace>PublicID</userreplace>. The corresponding entry will be
output to the command line.
</value>
<value number="system &lt;SystemID&gt;">
Execute a public identifier lookup of the catalog entry for
<userreplace>SystemID</userreplace>. The corresponding entry will be output
to the command line.</value>

<value number="add &lt;type&gt; &lt;orig&gt; &lt;replace&gt;">
Add an entry to the catalog file. <userreplace>type</userreplace> indicates
the type of entry. Possible types are 'public', 'system', 'rewriteSystem',
'delegatePublic' and 'delegateSystem'. <userreplace>orig</userreplace> is
the original reference to  be replaced, and
<userreplace>replace</userreplace> is the URI of the replacement entity to
be used. </value>

<value number="del &lt;values&gt;">.
Remove the catalog entry corresponding to <userreplace>values</userreplace>
</value>

<value number="dump">Print the current catalog</value>

<value number="debug">Print debugging statements showing the steps
xmlcatalog is executing</value>

<value number="quiet">Stop printing debugging statements</value>

<value number="exit">Quit the shell</value>
</value-table>
</p>

</use>

<related>
<reference type="command" name="XMLLint" />
</related>

</command-definition>


<command-definition name="XMLLint"
                    description="Parse the XML files and output the result of the parsing">
<syntax>

 <optional><switch name="version" /></optional>
 <optional><switch name="debug" /></optional>
 <optional><switch name="shell" /></optional>
 <optional><switch name="debugent" /></optional>
 <optional><switch name="copy" /></optional>
 <optional><switch name="recover" /></optional>
 <optional><switch name="huge" /></optional>
 <optional><switch name="noent" /></optional>
 <optional><switch name="noenc" /></optional>
 <optional><switch name="noout" /></optional>
 <optional><switch name="path" /><userreplace>paths</userreplace></optional>
 <optional><switch name="load-trace" /></optional>
 <optional><switch name="nonet" /></optional>
 <optional><switch name="nocompact" /></optional>
 <optional><switch name="htmlout" /></optional>
 <optional><switch name="nowrap" /></optional>
 <optional><switch name="valid" /></optional>
 <optional><switch name="postvalid" /></optional>
 <optional><switch name="dtdvalid" /><userreplace>URL</userreplace></optional>
 <optional><switch name="dtdvalidfpi" /><userreplace>FPI</userreplace></optional>
 <optional><switch name="quiet" /></optional>
 <optional><switch name="timing" /></optional>
 <optional><switch name="output" /><userreplace>file</userreplace></optional>
 <optional><switch name="repeat" /></optional>
 <optional><switch name="insert" /></optional>
 <optional><switch name="html" /></optional>
 <optional><switch name="xmlout" /></optional>
 <optional><switch name="nodefdtd" /></optional>
 <optional><switch name="push" /></optional>
 <optional><switch name="pushsmall" /></optional>
 <optional><switch name="maxmem" /><userreplace>nbbytes</userreplace></optional>
 <optional><switch name="nowarning" /></optional>
 <optional><switch name="noblanks" /></optional>
 <optional><switch name="nocdata" /></optional>
 <optional><switch name="format" /></optional>
 <optional><switch name="encode" /><userreplace>encoding</userreplace></optional>
 <optional><switch name="dropdtd" /></optional>
 <optional><switch name="pretty" /><userreplace>style</userreplace></optional>
 <optional><switch name="c14n" /></optional>
 <optional><switch name="c14n11" /></optional>
 <optional><switch name="exc" /></optional>
 <optional><switch name="nsclean" /></optional>
 <optional><switch name="testIO" /></optional>
 <optional><switch name="catalogs" /></optional>
 <optional><switch name="nocatalogs" /></optional>
 <optional><switch name="auto" /></optional>
 <optional><switch name="xinclude" /></optional>
 <optional><switch name="noxincludenode" /></optional>
 <optional><switch name="nofixup-base-uris" /></optional>
 <optional><switch name="loaddtd" /></optional>
 <optional><switch name="dtdattr" /></optional>
 <optional><switch name="throwback" /></optional>
 <optional><switch name="native" /></optional>
 <optional><switch name="stream" /></optional>
 <optional><switch name="walker" /></optional>
 <optional><switch name="pattern" /><userreplace>pattern</userreplace></optional>
 <optional><switch name="chkregister" /></optional>
 <optional><switch name="relaxng" /><userreplace>schema</userreplace></optional>
 <optional><switch name="schema" /><userreplace>schema</userreplace></optional>
 <optional><switch name="sax1" /></optional>
 <optional><switch name="sax" /></optional>
 <optional><switch name="oldxml10" /></optional>
 <optional><switch name="xpath" /><userreplace>expr</userreplace></optional>

</syntax>

<parameter switch="auto">Generate a small document for testing purposes.</parameter>

<parameter switch="catalogs">Use the SGML catalog(s) from <sysvar>SGML$CatalogFiles</sysvar>. Otherwise XML
       catalogs starting from <sysvar>XML$CatalogFiles</sysvar> are used by default.</parameter>

<parameter switch="chkregister">Turn on node registration. Useful for developers testing libxml
       node tracking code.</parameter>

<parameter switch="compress">Turn on gzip(1) compression of output.</parameter>

<parameter switch="copy">Test the internal copy implementation.</parameter>

<parameter switch="c14n">Use the W3C XML Canonicalisation (C14N) to serialize the result of
       parsing to stdout. It keeps comments in the result.</parameter>
<parameter switch="c14n11">Save in W3C canonical format v1.1 (with comments).</parameter>

<parameter switch="dtdvalid" name="URL">Use the DTD specified by an URL for validation.</parameter>

<parameter switch="dtdvalidfpi" name="FPI">Use the DTD specified by a Formal Public Identifier FPI for
       validation, note that this will require a catalog exporting that
       Formal Public Identifier to work.</parameter>

<parameter switch="debug">Parse a file and output an annotated tree of the in-memory version
       of the document.</parameter>

<parameter switch="debugent">Debug the entities defined in the document.</parameter>

<parameter switch="dropdtd">Remove DTD from output.</parameter>

<parameter switch="dtdattr">Fetch external DTD and populate the tree with inherited attributes.</parameter>

<parameter switch="encode" name="encoding">Output in the given encoding. Note that this works for full
       document not fragments or result from XPath queries.</parameter>

<parameter switch="exc-c14n">save in W3C exclusive canonical format (with comments)</parameter>

<parameter switch="format">Reformat and reindent the output. The XMLLINT_INDENT environment
       variable controls the indentation. The default value is two spaces
       " ").
       <fixme>What variable?</fixme>
   </parameter>

<parameter switch="help">Print out a short usage summary for xmllint.</parameter>

<parameter switch="html">Use the HTML parser.</parameter>

<parameter switch="htmlout">Output results as an HTML file. This causes xmllint to output the
       necessary HTML tags surrounding the result tree output so the
       results can be displayed/viewed in a browser.</parameter>

<parameter switch="huge">Remove any internal arbitrary parser limits.</parameter>

<parameter switch="insert">Test for valid insertions.</parameter>

<parameter switch="loaddtd">Fetch an external DTD.</parameter>

<parameter switch="load-trace">Display all the documents loaded during the processing to stderr.</parameter>

<parameter switch="maxmem" name="nnbytes">Test the parser memory support.  'nnbytes' is the maximum number of
       bytes the library is allowed to allocate. This can also be used to
       make sure batch processing of XML files will not exhaust the
       virtual memory of the server running them.</parameter>

<parameter switch="memory">Parse from memory.</parameter>

<parameter switch="native">Filenames on the command line are in native RISC OS format.
        Default is to use URI format.</parameter>

<parameter switch="noblanks">Drop ignorable blank spaces.</parameter>

<parameter switch="nocatalogs">Do not use any catalogs.</parameter>

<parameter switch="nocdata">Substitute CDATA section by equivalent text nodes.</parameter>

<parameter switch="nocompact">Do not generate compact text nodes.</parameter>
<parameter switch="nodefdtd">Do not default HTML doctype.</parameter>
<parameter switch="noenc">Ignore any encoding specified inside the document.</parameter>

<parameter switch="noent">Substitute entity values for entity references. By default, xmllint
       leaves entity references in place.</parameter>

<parameter switch="nofixup-base-uris">Do not fixup xml:base URIs.</parameter>

<parameter switch="nonet">Do not use the Internet to fetch DTDs or entities.</parameter>

<parameter switch="noout">Suppress output. By default, xmllint outputs the result tree.</parameter>

<parameter switch="nowarning">Do not emit warnings from the parser and/or validator.</parameter>

<parameter switch="nowrap">Do not output HTML doc wrapper.</parameter>

<parameter switch="noxincludenode">Do XInclude processing but do not generate XInclude start and end
       nodes.</parameter>

<parameter switch="nsclean">Remove redundant namespace declarations.</parameter>

<parameter switch="oldxml10">Use XML-1.0 parsing rules before the 5th edition.</parameter>

<parameter switch="output" name="file">Define a file path where xmllint will save the result of parsing.
       Usually the programs build a tree and save it on stdout, with this
       option the result XML instance will be saved onto a file.</parameter>

<parameter switch="path" name="paths">
       Use the (space- or colon-separated) list of filesystem paths
       specified by 'paths' to load DTDs or entities. Enclose
       space-separated lists by quotation marks.</parameter>

<parameter switch="pattern" name="pattern">Used to exercise the pattern recognition engine, which can be used
       with the reader interface to the parser. It allows to select some
       nodes in the document based on an XPath (subset) expression. Used
       for debugging.</parameter>

<parameter switch="postvalid">Validate after parsing has completed.</parameter>

<parameter switch="pretty" name="style">Pretty-print in a particular style<br/>
                     0 : Do not pretty print.<br/>
                     1 : Format the XML content, as --format.<br/>
                     2 : Add whitespace inside tags, preserving content.</parameter>

<parameter switch="push">Use the push mode of the parser.</parameter>

<parameter switch="pushsmall">Use the push mode of the parser using tiny increments.</parameter>

<parameter switch="quiet">Be quiet when succeeded.</parameter>

<parameter switch="recover">Output any parsable portions of an invalid document.</parameter>

<parameter switch="relaxng" name="schema">Use RelaxNG file named 'schema' for validation.</parameter>

<parameter switch="repeat">Repeat 100 times, for timing or profiling.</parameter>

<parameter switch="sax">Do not build a tree but work just at the SAX level.</parameter>
<parameter switch="sax1">Use the old SAX1 interfaces for processing.</parameter>

<parameter switch="schema" name="schema">Use a W3C XML Schema file named 'schema' for validation.</parameter>

<parameter switch="shell">Run a navigating shell. Details on available commands in shell mode
       are below.</parameter>

<parameter switch="xpath" name="expr">
       Run an XPath expression given as argument and print the result. In
       case of a nodeset result, each node in the node set is serialized
       in full in the output. In case of an empty node set the "XPath set
       is empty" result will be shown and an error exit code will be
       returned.</parameter>

<parameter switch="stream">Use streaming API - useful when used in combination with --relaxng
       or --valid options for validation of files that are too large to be
       held in memory.</parameter>

<parameter switch="testIO">Test user input/output support.</parameter>

<parameter switch="throwback">Provide feedback to external tasks (RISC OS only).</parameter>

<parameter switch="timing">Output information about the time it takes xmllint to perform the
       various steps.</parameter>

<parameter switch="valid">Determine if the document is a valid instance of the included
       Document Type Definition (DTD). A DTD to be validated against also
       can be specified at the command line using the --dtdvalid option.
       By default, xmllint also checks to determine if the document is
       well-formed.</parameter>

<parameter switch="version">Display the version of libxml used.</parameter>

<parameter switch="walker">Test the walker module, which is a reader interface but for a
       document tree, instead of using the reader API on an unparsed
       document it works on an existing in-memory tree. Used for
       debugging.</parameter>

<parameter switch="xinclude">Do XInclude processing.</parameter>

<parameter switch="xmlout">Used in conjunction with --html. Usually when HTML is parsed the
       document is saved with the HTML serializer. But with this option
       the resulting document is saved with the XML serializer. This is
       primarily used to generate XHTML from HTML input.</parameter>



<use>
<p>xmllint is a command line application allowing users to process XML. It
is included in libxml2 distributions. The files specified on the command line are
in URI format - using '/' as a directory separator, and '.' as an extension. This
can be changed to native format by specifying the '--native' switch.
</p>

<category title="XMLLint shell">
<p>The tool includes a 'shell' - a line based command system which can be used
    to navigate through an XML document. The commands which can be used in the
    shell are:</p>

<p>
<value-table head-number="Command">
    <value number="base">Display XML base of the node.</value>
    <value number="bye">Leave the shell.</value>
    <value number="cat NODE">Display the given node or the current one.</value>
    <value number="cd PATH">Change the current node to the given path (if unique) or root if no argument is given.</value>
    <value number="dir PATH">Dumps information about the node (namespace, attributes, content).</value>
    <value number="du PATH">Show the structure of the subtree under the given path or the current node.</value>
    <value number="exit">Leave the shell.</value>
    <value number="help">Show this help.</value>
    <value number="free">Display memory usage.</value>
    <value number="load FILENAME">Load a new document with the given filename.</value>
    <value number="ls PATH">List contents of the given path or the current directory.</value>
    <value number="pwd">Display the path to the current node.</value>
    <value number="quit">Leave the shell.</value>
    <value number="save FILENAME">Save the current document to the given filename or to the original name.</value>
    <value number="validate">Check the document for errors.</value>
    <value number="write FILENAME">Write the current node to the given filename.</value>
</value-table>
</p>

</category>

<category title="XMLLint return codes">
    <p>xmllint return codes provide information that can be used to determine is status.</p>

<p>
<value-table>
<value number="0">No error</value>
<value number="1">Unclassified</value>
<value number="2">Error in DTD</value>
<value number="3">Validation error</value>
<value number="4">Validation error</value>
<value number="5">Error in schema compilation</value>
<value number="6">Error writing output</value>
<value number="7">Error in pattern (generated when --pattern option is used)</value>
<value number="8">Error in Reader registration (generated when --chkregister option is used)</value>
<value number="9">Out of memory error</value>
</value-table>
</p>
</category>

</use>

<related>
<reference type="command" name="XMLCatalog" />
</related>

</command-definition>
</section>

</chapter>

<!-- MetaData -->
<meta>
 <maintainer>
  <email name="Gerph" address="gerph@gerph.org" />
 </maintainer>
 <disclaimer>
  <p>
   This document covers the RISC OS version of the XML tools from LibXML2.<br />
   It is maintained by Gerph, based on the
   documentation originally written by the authors of the libraries.
  </p>
 </disclaimer>

 <history>
  <revision number="1" date="15 Dec 2002" author="Gerph" title="Initial version">
  </revision>
  <revision number="2" date="15 Jan 2002" author="Gerph" title="LibXML 2.4.13">
   <change>XMLLint: -output, and -dropdtd documented.</change>
   <change>Added note about filename usage.</change>
  </revision>
  <revision number="3" date="20 Jun 2021" author="Gerph" title="LibXML 2.9.12">
   <change>Huge upgrade for ~17 years development of LibXML.</change>
   <change>Updated documentation of features.</change>
  </revision>
 </history>
 <related>
 </related>
</meta>
</riscos-prm>
